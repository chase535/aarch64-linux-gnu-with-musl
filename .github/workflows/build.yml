name: Build
on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/build.yml'
  schedule:
    - cron: '0 16 * * *'
env:
  GMP_VERSION: "6.3.0"
  GITHUB_USER: "${{secrets.USERNAME}}"
  GITHUB_EMAIL: "${{secrets.EMAIL}}"
  GITHUB_TOKEN: "${{secrets.API_TOKEN_GITHUB}}"
  SOURCE_DIR: "${{github.workspace}}/source"
  OUTPUT_DIR: "${{github.workspace}}/output"
  BUILD_DIR: "${{github.workspace}}/build"
  WGET_DIR: "${{github.workspace}}/wget"
  MPREFIX: "${{github.workspace}}/output/toolchain"
  MSYSROOT: "${{github.workspace}}/output/sysroot"
  PATH: "${{github.workspace}}/output/toolchain/bin:/usr/bin:/bin"
  CFLAGS: "-g0 -O2"
  CXXFLAGS: "-g0 -O2"
  LDFLAGS: "-g0 -O2 -Wl,-O2,--hash-style=both"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Set timezone to UTC+8
      run: |
        sudo rm -f /etc/localtime && sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
        echo "$(date "+%Y.%m.%d %H:%M:%S UTC%z")" | tee /tmp/start_time
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y axel flex bison ncurses-dev texinfo gcc make libtool bc autoconf build-essential pkg-config tar lzip git autopoint gettext help2man txt2man libssl-dev wget
    - name: Create directory
      run: |
        mkdir -vp ${SOURCE_DIR} ${OUTPUT_DIR} ${WGET_DIR} ${MPREFIX} ${MSYSROOT}/usr/include ${BUILD_DIR}/{build-gmp,build-mpfr,build-mpc,build-isl,build-binutils,build-gcc,build-musl}
    - name: Wget and unzip gmp-${{ env.GMP_VERSION }}
      run: |
        wget -P ${WGET_DIR} https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VERSION}.tar.xz
        tar -xvf ${WGET_DIR}/gmp-${GMP_VERSION}.tar.xz -C ${SOURCE_DIR}
        mv -f ${SOURCE_DIR}/gmp-${GMP_VERSION} ${SOURCE_DIR}/gmp
    - name: Clone mpfr
      run: git clone https://gitlab.inria.fr/mpfr/mpfr -b master ${SOURCE_DIR}/mpfr --depth=1
    - name: Clone isl
      run: git clone git://repo.or.cz/isl -b master ${SOURCE_DIR}/isl --depth=1
    - name: Clone mpc
      run: git clone https://gitlab.inria.fr/mpc/mpc -b master ${SOURCE_DIR}/mpc --depth=1
    - name: Clone binutils
      run: git clone git://sourceware.org/git/binutils-gdb -b master ${SOURCE_DIR}/binutils --depth=1
    - name: Clone gcc
      run: git clone git://gcc.gnu.org/git/gcc -b master ${SOURCE_DIR}/gcc --depth=1
    - name: Clone musl
      run: git clone git://git.musl-libc.org/musl -b master ${SOURCE_DIR}/musl --depth=1
    - name: Clone linux kernel
      run: git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux -b master ${SOURCE_DIR}/linux --depth=1
    - name: Fix a bug
      run: |
        sed -i 's/ off64_t / off_t /g' ${SOURCE_DIR}/gcc/libstdc++-v3/src/filesystem/ops-common.h
    - name: Make gmp
      run: |
        cd ${BUILD_DIR}/build-gmp
        ${SOURCE_DIR}/gmp/configure --prefix="${OUTPUT_DIR}/gmp"
        make all -j$(nproc --all)
        make install -j$(nproc --all)
    - name: Make mpfr
      run: |
        cd ${SOURCE_DIR}/mpfr
        aclocal && autoconf && autoheader && automake --add-missing
        cd ${BUILD_DIR}/build-mpfr
        ${SOURCE_DIR}/mpfr/configure --prefix="${OUTPUT_DIR}/mpfr" --with-gmp="${OUTPUT_DIR}/gmp"
        make all -j$(nproc --all)
        make install -j$(nproc --all)
    - name: Make isl
      run: |
        cd ${SOURCE_DIR}/isl
        aclocal && autoconf && autoheader && automake --add-missing
        cd ${BUILD_DIR}/build-isl
        ${SOURCE_DIR}/isl/configure --prefix="${OUTPUT_DIR}/isl" --with-gmp="${OUTPUT_DIR}/gmp"
        make all -j$(nproc --all)
        make install -j$(nproc --all)
    - name: Make mpc
      run: |
        cd ${SOURCE_DIR}/mpc
        aclocal && autoconf && autoheader && automake --add-missing
        cd ${BUILD_DIR}/build-mpc
        ${SOURCE_DIR}/mpc/configure --prefix="${OUTPUT_DIR}/mpc" --with-gmp="${OUTPUT_DIR}/gmp" --with-mpfr="${OUTPUT_DIR}/mpfr"
        make all -j$(nproc --all)
        make install -j$(nproc --all)
    - name: Make musl headers
      run: |
        cd ${SOURCE_DIR}/musl
        make ARCH="aarch64" prefix="/usr" DESTDIR="${MSYSROOT}" install-headers -j$(nproc --all)
    - name: Configure binutils
      run: |
        cd ${BUILD_DIR}/build-binutils
        ${SOURCE_DIR}/binutils/configure --target="aarch64-linux-musl" --prefix="${MPREFIX}" --with-sysroot="${MSYSROOT}" --disable-multilib --disable-werro --with-gmp="${OUTPUT_DIR}/gmp" --with-mpc="${OUTPUT_DIR}/mpc" --with-mpfr="${OUTPUT_DIR}/mpfr" --with-isl="${OUTPUT_DIR}/isl"
    - name: Make binutils
      run: |
        cd ${BUILD_DIR}/build-binutils
        make all-binutils all-gas all-ld -j$(nproc --all)
        make install-strip-binutils install-strip-gas install-strip-ld -j$(nproc --all)
    - name: Configure gcc
      run: |
        cd ${BUILD_DIR}/build-gcc
        ${SOURCE_DIR}/gcc/configure --target="aarch64-linux-musl" --prefix="${MPREFIX}" --with-sysroot="${MSYSROOT}" --enable-languages="c,c++" --disable-multilib --disable-bootstrap --disable-libsanitizer --disable-werror --enable-initfini-array --with-arch=armv8-a --with-abi=lp64 --enable-fix-cortex-a53-835769 --enable-fix-cortex-a53-843419 --with-gmp="${OUTPUT_DIR}/gmp" --with-mpc="${OUTPUT_DIR}/mpc" --with-mpfr="${OUTPUT_DIR}/mpfr" --with-isl="${OUTPUT_DIR}/isl"
    - name: Make gcc (compiler)
      run: |
        cd ${BUILD_DIR}/build-gcc
        make all-gcc -j$(nproc --all)
        make install-strip-gcc -j$(nproc --all)
    - name: Make gcc (libgcc-static)
      run: |
        cd ${BUILD_DIR}/build-gcc
        make enable_shared=no all-target-libgcc -j$(nproc --all)
        make install-strip-target-libgcc -j$(nproc --all)
    - name: Configure musl
      run: |
        cd ${BUILD_DIR}/build-musl
        LIBCC_DIR=$(find ${MPREFIX}/lib/gcc/aarch64-linux-musl -maxdepth 1 -type d -name "[0-9]*")
        ARCH="aarch64"
        CC="aarch64-linux-musl-gcc"
        CROSS_COMPILE="aarch64-linux-musl-"
        LIBCC="${LIBCC_DIR}/libgcc.a"
        ${SOURCE_DIR}/musl/configure --host="aarch64-linux-musl" --prefix="/usr"
    - name: Make musl
      run: |
        cd ${BUILD_DIR}/build-musl
        make AR="aarch64-linux-musl-ar" RANLIB="aarch64-linux-musl-ranlib" -j$(nproc --all)
        make AR="aarch64-linux-musl-ar" RANLIB="aarch64-linux-musl-ranlib" DESTDIR="${MSYSROOT}" install -j$(nproc --all)
        rm -vf ${MSYSROOT}/lib/ld-musl-aarch64.so.1
        cp -avf ${MSYSROOT}/usr/lib/libc.so ${MSYSROOT}/lib/ld-musl-aarch64.so.1
    - name: Make gcc (libgcc-shared)
      run: |
        cd ${BUILD_DIR}/build-gcc
        make -C aarch64-linux-musl/libgcc distclean -j$(nproc --all)
        make enable_shared=yes all-target-libgcc -j$(nproc --all)
        make install-strip-target-libgcc -j$(nproc --all)
    - name: Make gcc (libstdc++-v3)
      run: |
        cd ${BUILD_DIR}/build-gcc
        make all-target-libstdc++-v3 -j$(nproc --all)
        make install-strip-target-libstdc++-v3 -j$(nproc --all)
    - name: Make gcc (libgomp)
      run: |
        cd ${BUILD_DIR}/build-gcc
        make all-target-libgomp -j$(nproc --all)
        make install-strip-target-libgomp -j$(nproc --all)
    - name: Make linux headers
      run: |
        cd ${SOURCE_DIR}/linux
        make ARCH=arm64 mrproper -j$(nproc --all)
        make O="${OUTPUT_DIR}/linux" ARCH=arm64 INSTALL_HDR_PATH="${MSYSROOT}/usr" headers_install -j$(nproc --all)
    - name: Merge directory
      run: |
        cp -avf ${MSYSROOT}/lib ${MSYSROOT}/usr/* ${MPREFIX}/aarch64-linux-musl
    - name: Push
      run: |
        git config --global user.name "${GITHUB_USER}"
        git config --global user.email "${GITHUB_EMAIL}"
        mkdir -vp /home/runner/work/git_clone
        git clone https://"${GITHUB_USER}":"${GITHUB_TOKEN}"@github.com/chase535/aarch64-linux-musl-gcc /home/runner/work/git_clone -b main --depth=1
        cd /home/runner/work/git_clone
        OLD_FILES=`find . -maxdepth 1 -not \( -type d -name "." -o -type d -name ".git" -o -type d -name ".github" -o -type f -name "README.md" \)`
        [ -n "${OLD_FILES}" ] && git rm -rf ${OLD_FILES} && git commit -as -m "Delete old files"
        cp -avf ${MPREFIX}/* .
        git add . -f
        git commit -as -m "$(cat /tmp/start_time)" -m "$(./bin/aarch64-linux-musl-gcc --version)"
        git push origin main -f
