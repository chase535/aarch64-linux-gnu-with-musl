name: Build

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/build.yml'
  schedule:
    - cron: '0 16 * * *'

env:
  GMP_VERSION: "6.3.0"
  MPFR_VERSION: "4.2.1"
  ISL_VERSION: "0.26"
  MPC_VERSION: "1.3.1"
  HOME: "${{ github.workspace }}"
  SOURCE_DIR: "${{ github.workspace }}/source"
  OUTPUT_DIR: "${{ github.workspace }}/output"
  BUILD_DIR: "${{ github.workspace }}/build"
  WGET_DIR: "${{ github.workspace }}/wget"
  MPREFIX: "${{ github.workspace }}/output/toolchain"
  MSYSROOT: "${{ github.workspace }}/output/sysroot"
  PATH: "${{ github.workspace }}/output/toolchain/bin:/usr/bin:/bin"
  CFLAGS: "-g0 -O2"
  CXXFLAGS: "-g0 -O2"
  LDFLAGS: "-g0 -O2 -Wl,-O2,--hash-style=both"

jobs:
  make-musl-headers:
    runs-on: ubuntu-latest
    steps:
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y axel flex bison ncurses-dev texinfo gcc make libtool bc autoconf build-essential pkg-config tar lzip git autopoint gettext help2man txt2man libssl-dev wget
    - name: Create directory
      run: mkdir -vp ${SOURCE_DIR} ${OUTPUT_DIR} ${MSYSROOT}/usr/include
    - name: Clone musl
      run: git clone git://git.musl-libc.org/musl ${SOURCE_DIR}/musl -b master --depth=1
    - name: Make musl headers
      run: |
        cd ${SOURCE_DIR}/musl
        make ARCH="aarch64" prefix="/usr" DESTDIR="${MSYSROOT}" install-headers -j$(nproc --all)
    - name: Zip files
      run: |
        cd ${MSYSROOT}/usr/include
        tar -czvf ${HOME}/musl-headers.tar.gz *
    - name: Upload musl headers
      uses: actions/upload-artifact@v3
      with:
        name: musl-headers
        path: ${{ env.HOME }}/musl-headers.tar.gz

  make-linux-headers:
    runs-on: ubuntu-latest
    steps:
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y axel flex bison ncurses-dev texinfo gcc make libtool bc autoconf build-essential pkg-config tar lzip git autopoint gettext help2man txt2man libssl-dev wget
    - name: Create directory
      run: mkdir -vp ${SOURCE_DIR} ${OUTPUT_DIR} ${MSYSROOT}/usr/include
    - name: Clone linux
      run: git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux ${SOURCE_DIR}/linux -b master --depth=1
    - name: Make linux headers
      run: |
        cd ${SOURCE_DIR}/linux
        make ARCH=arm64 mrproper -j$(nproc --all)
        make O="${OUTPUT_DIR}/linux" ARCH=arm64 INSTALL_HDR_PATH="${MSYSROOT}/usr" headers_install -j$(nproc --all)
    - name: Zip files
      run: tar -czvf ${HOME}/linux-headers.tar.gz -C${MSYSROOT}/usr/include *
    - name: Upload linux headers
      uses: actions/upload-artifact@v3
      with:
        name: linux-headers
        path: ${{ env.HOME }}/linux-headers.tar.gz

  build-gmp:
    runs-on: ubuntu-latest
    steps:
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y axel flex bison ncurses-dev texinfo gcc make libtool bc autoconf build-essential pkg-config tar lzip git autopoint gettext help2man txt2man libssl-dev wget
    - name: Create directory
      run: mkdir -vp ${SOURCE_DIR} ${OUTPUT_DIR} ${WGET_DIR} ${BUILD_DIR}/build-gmp
    - name: Wget and unzip gmp-${{ env.GMP_VERSION }}
      run: |
        wget -P ${WGET_DIR} https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VERSION}.tar.xz
        tar -xJvf ${WGET_DIR}/gmp-${GMP_VERSION}.tar.xz -C ${SOURCE_DIR}
    - name: Make gmp
      run: |
        cd ${BUILD_DIR}/build-gmp
        ${SOURCE_DIR}/gmp-${GMP_VERSION}/configure --prefix="${OUTPUT_DIR}/gmp"
        make all -j$(nproc --all)
        make install -j$(nproc --all)
    - name: Zip files
      run: tar -czvf ${HOME}/gmp.tar.gz -C${OUTPUT_DIR}/gmp *
    - name: Upload gmp
      uses: actions/upload-artifact@v3
      with:
        name: gmp
        path: ${{ env.HOME }}/gmp.tar.gz

  build-mpfr:
    needs: [ build-gmp ]
    runs-on: ubuntu-latest
    steps:
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y axel flex bison ncurses-dev texinfo gcc make libtool bc autoconf build-essential pkg-config tar lzip git autopoint gettext help2man txt2man libssl-dev wget
    - name: Create directory
      run: mkdir -vp ${SOURCE_DIR} ${OUTPUT_DIR}/gmp ${WGET_DIR} ${BUILD_DIR}/build-mpfr
    - name: Restore gmp
      uses: actions/download-artifact@v3
      with:
        name: gmp
        path: ${{ env.HOME }}
    - name: Unzip file
      run: tar -xzvf ${HOME}/gmp.tar.gz -C ${OUTPUT_DIR}/gmp
    - name: Wget and unzip mpfr-${{ env.MPFR_VERSION }}
      run: |
        wget -P ${WGET_DIR} https://ftp.gnu.org/gnu/mpfr/mpfr-${MPFR_VERSION}.tar.gz
        tar -xzvf ${WGET_DIR}/mpfr-${MPFR_VERSION}.tar.gz -C ${SOURCE_DIR}
    - name: Make mpfr
      run: |
        cd ${BUILD_DIR}/build-mpfr
        ${SOURCE_DIR}/mpfr-${MPFR_VERSION}/configure --prefix="${OUTPUT_DIR}/mpfr" --with-gmp="${OUTPUT_DIR}/gmp"
        make all -j$(nproc --all)
        make install -j$(nproc --all)
    - name: Zip files
      run: tar -czvf ${HOME}/mpfr.tar.gz -C${OUTPUT_DIR}/mpfr *
    - name: Upload mpfr
      uses: actions/upload-artifact@v3
      with:
        name: mpfr
        path: ${{ env.HOME }}/mpfr.tar.gz

  build-isl:
    needs: [ build-gmp ]
    runs-on: ubuntu-latest
    steps:
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y axel flex bison ncurses-dev texinfo gcc make libtool bc autoconf build-essential pkg-config tar lzip git autopoint gettext help2man txt2man libssl-dev wget
    - name: Create directory
      run: mkdir -vp ${SOURCE_DIR} ${OUTPUT_DIR}/gmp ${WGET_DIR} ${BUILD_DIR}/build-isl
    - name: Restore gmp
      uses: actions/download-artifact@v3
      with:
        name: gmp
        path: ${{ env.HOME }}
    - name: Unzip file
      run: tar -xzvf ${HOME}/gmp.tar.gz -C ${OUTPUT_DIR}/gmp
    - name: Wget and unzip isl-${{ env.ISL_VERSION }}
      run: |
        wget -P ${WGET_DIR} https://libisl.sourceforge.io/isl-${ISL_VERSION}.tar.gz
        tar -xzvf ${WGET_DIR}/isl-${ISL_VERSION}.tar.gz -C ${SOURCE_DIR}
    - name: Make isl
      run: |
        cd ${BUILD_DIR}/build-isl
        ${SOURCE_DIR}/isl-${ISL_VERSION}/configure --prefix="${OUTPUT_DIR}/isl" --with-gmp="${OUTPUT_DIR}/gmp"
        make all -j$(nproc --all)
        make install -j$(nproc --all)
    - name: Zip files
      run: tar -czvf ${HOME}/isl.tar.gz -C${OUTPUT_DIR}/isl *
    - name: Upload isl
      uses: actions/upload-artifact@v3
      with:
        name: isl
        path: ${{ env.HOME }}/isl.tar.gz

  build-mpc:
    needs: [ build-gmp, build-mpfr ]
    runs-on: ubuntu-latest
    steps:
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y axel flex bison ncurses-dev texinfo gcc make libtool bc autoconf build-essential pkg-config tar lzip git autopoint gettext help2man txt2man libssl-dev wget
    - name: Create directory
      run: mkdir -vp ${SOURCE_DIR} ${OUTPUT_DIR}/{gmp,mpfr} ${WGET_DIR} ${BUILD_DIR}/build-mpc
    - name: Restore gmp
      uses: actions/download-artifact@v3
      with:
        name: gmp
        path: ${{ env.HOME }}
    - name: Restore mpfr
      uses: actions/download-artifact@v3
      with:
        name: mpfr
        path: ${{ env.HOME }}
    - name: Unzip file
      run: |
        tar -xzvf ${HOME}/gmp.tar.gz -C ${OUTPUT_DIR}/gmp
        tar -xzvf ${HOME}/mpfr.tar.gz -C ${OUTPUT_DIR}/mpfr
    - name: Wget and unzip mpc-${{ env.MPC_VERSION }}
      run: |
        wget -P ${WGET_DIR} https://ftp.gnu.org/gnu/mpc/mpc-${MPC_VERSION}.tar.gz
        tar -xzvf ${WGET_DIR}/mpc-${MPC_VERSION}.tar.gz -C ${SOURCE_DIR}
    - name: Make mpc
      run: |
        cd ${BUILD_DIR}/build-mpc
        ${SOURCE_DIR}/mpc-${MPC_VERSION}/configure --prefix="${OUTPUT_DIR}/mpc" --with-gmp="${OUTPUT_DIR}/gmp" --with-mpfr="${OUTPUT_DIR}/mpfr"
        make all -j$(nproc --all)
        make install -j$(nproc --all)
    - name: Zip files
      run: tar -czvf ${HOME}/mpc.tar.gz -C${OUTPUT_DIR}/mpc *
    - name: Upload mpc
      uses: actions/upload-artifact@v3
      with:
        name: mpc
        path: ${{ env.HOME }}/mpc.tar.gz

  build-gcc:
    needs: [ make-musl-headers, build-mpc, build-isl ]
    runs-on: ubuntu-latest
    steps:
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y axel flex bison ncurses-dev texinfo gcc make libtool bc autoconf build-essential pkg-config tar lzip git autopoint gettext help2man txt2man libssl-dev wget
    - name: Create directory
      run: mkdir -vp ${SOURCE_DIR} ${OUTPUT_DIR}/{gmp,mpfr,mpc,isl} ${MPREFIX} ${MSYSROOT}/usr/include ${BUILD_DIR}/{build-binutils,build-gcc,build-musl}
    - name: Restore gmp
      uses: actions/download-artifact@v3
      with:
        name: gmp
        path: ${{ env.HOME }}
    - name: Restore mpfr
      uses: actions/download-artifact@v3
      with:
        name: mpfr
        path: ${{ env.HOME }}
    - name: Restore mpc
      uses: actions/download-artifact@v3
      with:
        name: mpc
        path: ${{ env.HOME }}
    - name: Restore isl
      uses: actions/download-artifact@v3
      with:
        name: isl
        path: ${{ env.HOME }}
    - name: Restore musl-headers
      uses: actions/download-artifact@v3
      with:
        name: musl-headers
        path: ${{ env.HOME }}
    - name: Unzip file
      run: |
        tar -xzvf ${HOME}/gmp.tar.gz -C ${OUTPUT_DIR}/gmp
        tar -xzvf ${HOME}/mpfr.tar.gz -C ${OUTPUT_DIR}/mpfr
        tar -xzvf ${HOME}/mpc.tar.gz -C ${OUTPUT_DIR}/mpc
        tar -xzvf ${HOME}/isl.tar.gz -C ${OUTPUT_DIR}/isl
        tar -xzvf ${HOME}/musl-headers.tar.gz -C ${MSYSROOT}/usr/include
    - name: Clone binutils
      run: git clone git://sourceware.org/git/binutils-gdb ${SOURCE_DIR}/binutils -b master --depth=1
    - name: Clone gcc
      run: git clone git://gcc.gnu.org/git/gcc ${SOURCE_DIR}/gcc -b master --depth=1
    - name: Clone musl
      run: git clone git://git.musl-libc.org/musl ${SOURCE_DIR}/musl -b master --depth=1
    - name: Configure binutils
      run: |
        cd ${BUILD_DIR}/build-binutils
        ${SOURCE_DIR}/binutils/configure --target="aarch64-linux-musl" --prefix="${MPREFIX}" --with-sysroot="${MSYSROOT}" --disable-multilib --disable-werro --with-gmp="${OUTPUT_DIR}/gmp" --with-mpc="${OUTPUT_DIR}/mpc" --with-mpfr="${OUTPUT_DIR}/mpfr" --with-isl="${OUTPUT_DIR}/isl"
    - name: Make binutils
      run: |
        cd ${BUILD_DIR}/build-binutils
        make all-binutils all-gas all-ld -j$(nproc --all)
        make install-strip-binutils install-strip-gas install-strip-ld -j$(nproc --all)
    - name: Configure gcc
      run: |
        cd ${BUILD_DIR}/build-gcc
        ${SOURCE_DIR}/gcc/configure --target="aarch64-linux-musl" --prefix="${MPREFIX}" --with-sysroot="${MSYSROOT}" --enable-languages="c,c++" --disable-multilib --disable-bootstrap --disable-libsanitizer --disable-werror --enable-initfini-array --with-arch=armv8-a --with-abi=lp64 --enable-fix-cortex-a53-835769 --enable-fix-cortex-a53-843419 --with-gmp="${OUTPUT_DIR}/gmp" --with-mpc="${OUTPUT_DIR}/mpc" --with-mpfr="${OUTPUT_DIR}/mpfr" --with-isl="${OUTPUT_DIR}/isl"
    - name: Make gcc (compiler)
      run: |
        cd ${BUILD_DIR}/build-gcc
        make all-gcc -j$(nproc --all)
        make install-strip-gcc -j$(nproc --all)
    - name: Make gcc (libgcc-static)
      run: |
        cd ${BUILD_DIR}/build-gcc
        make enable_shared=no all-target-libgcc -j$(nproc --all)
        make install-strip-target-libgcc -j$(nproc --all)
    - name: Configure musl
      run: |
        cd ${BUILD_DIR}/build-musl
        LIBCC_DIR=$(find ${MPREFIX}/lib/gcc/aarch64-linux-musl -maxdepth 1 -type d -name "[0-9]*")
        ARCH="aarch64"
        CC="aarch64-linux-musl-gcc"
        CROSS_COMPILE="aarch64-linux-musl-"
        LIBCC="${LIBCC_DIR}/libgcc.a"
        ${SOURCE_DIR}/musl/configure --host="aarch64-linux-musl" --prefix="/usr"
    - name: Make musl
      run: |
        cd ${BUILD_DIR}/build-musl
        make AR="aarch64-linux-musl-ar" RANLIB="aarch64-linux-musl-ranlib" -j$(nproc --all)
        make AR="aarch64-linux-musl-ar" RANLIB="aarch64-linux-musl-ranlib" DESTDIR="${MSYSROOT}" install -j$(nproc --all)
        rm -vf ${MSYSROOT}/lib/ld-musl-aarch64.so.1
        cp -avf ${MSYSROOT}/usr/lib/libc.so ${MSYSROOT}/lib/ld-musl-aarch64.so.1
    - name: Make gcc (libgcc-shared)
      run: |
        cd ${BUILD_DIR}/build-gcc
        make -C aarch64-linux-musl/libgcc distclean -j$(nproc --all)
        make enable_shared=yes all-target-libgcc -j$(nproc --all)
        make install-strip-target-libgcc -j$(nproc --all)
    - name: Make gcc (libstdc++-v3)
      run: |
        cd ${BUILD_DIR}/build-gcc
        make all-target-libstdc++-v3 -j$(nproc --all)
        make install-strip-target-libstdc++-v3 -j$(nproc --all)
    - name: Make gcc (libgomp)
      run: |
        cd ${BUILD_DIR}/build-gcc
        make all-target-libgomp -j$(nproc --all)
        make install-strip-target-libgomp -j$(nproc --all)
    - name: Merge directory
      run: cp -avf ${MSYSROOT}/lib ${MSYSROOT}/usr/* ${MPREFIX}/aarch64-linux-musl
    - name: Zip files
      run: tar -czvf ${HOME}/gcc.tar.gz -C${MPREFIX} *
    - name: Upload gcc
      uses: actions/upload-artifact@v3
      with:
        name: gcc
        path: ${{ env.HOME }}/gcc.tar.gz

  merge-and-push:
    needs: [ make-linux-headers, build-gcc ]
    runs-on: ubuntu-latest
    env:
      GIT_DIR: "${{ github.workspace }}/git_clone"
      GITHUB_USER: "${{ secrets.USERNAME }}"
      GITHUB_EMAIL: "${{ secrets.EMAIL }}"
      GITHUB_TOKEN: "${{ secrets.API_TOKEN_GITHUB }}"
    steps:
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y git
    - name: Create directory
      run: |
        mkdir -vp ${MPREFIX}
    - name: Restore gcc
      uses: actions/download-artifact@v3
      with:
        name: gcc
        path: ${{ env.HOME }}
    - name: Restore linux-headers
      uses: actions/download-artifact@v3
      with:
        name: linux-headers
        path: ${{ env.HOME }}
    - name: Unzip file
      run: |
        tar -xzvf ${HOME}/gcc.tar.gz -C ${MPREFIX}
        tar -xzvf ${HOME}/linux-headers.tar.gz -C ${MPREFIX}/usr/include
    - name: Push
      run: |
        git config --global user.name "${GITHUB_USER}"
        git config --global user.email "${GITHUB_EMAIL}"
        git clone https://"${GITHUB_USER}":"${GITHUB_TOKEN}"@github.com/chase535/aarch64-linux-musl-gcc ${GIT_DIR} -b main --depth=1
        cd ${GIT_DIR}
        #OLD_FILES=`find . -maxdepth 1 -not \( -type d -name "." -o -type d -name ".git" -o -type d -name ".github" -o -type f -name "README.md" \)`
        #[ -n "${OLD_FILES}" ] && git rm -rf ${OLD_FILES} && git commit -as -m "Delete old files"
        cp -avf ${MPREFIX}/* .
        [ -z "$(git diff)" ] && echo "没有更改" && exit 0
        git add . -f
        git commit -as -m "$(./bin/aarch64-linux-musl-gcc --version)"
        git push origin main -f
